/* Generated By:JavaCC: Do not edit this line. ssc5906JMC.java */
package br.parser;

public class ssc5906JMC implements ssc5906JMCConstants {

static private final String Version = ("ssc5906JMC - icmcJMC - Java Model Checker \u005c"Version 0.1\u005c"  \u005cn A Java implementation");

  public static void main(String args []) throws ParseException
  {
        System.out.println(Version);
        String filename = " "; // file name to analyse
        ssc5906JMC parser;

        if (args.length < 1)
        System.out.println("Sorry, you have to insert a parameter ...");
        // caso em que nenhum arquivo é passado como parâmetro

        else
        {
        //abrir o arquivo para leitura
        filename = args[args.length-1];
    System.out.println("Reading Specification from file " + filename + " . . .");
        try {  // cria AS
            parser = new ssc5906JMC(new java.io.FileInputStream(filename));

            parser.unitJavaMC(); // chamada do método que faz a análise ...

            System.out.println(" Arquivo de parser valido ");

                        if (parser.token_source.foundLexError() > 0)
                {
              System.out.println("Lexical Errors found");
                }
                else
                {
                        /* aqui devemos processar a MEF ...  */
                }
        }
    catch (java.io.FileNotFoundException e)
        {
        System.out.println("File " + filename + " not found.");
        return;
        }
        }



  } // end main()


static public String im(String s)
{
int k;
   k = s.lastIndexOf("\u005c"");
   try {s = s.substring(1,k);}
   catch (StringIndexOutOfBoundsException e)
   {}
   return s;
}

//########################################
// INICIO DA DECLARACAO DE DO AN. LEXICO
//########################################
  static final public void unitJavaMC() throws ParseException {
    trace_call("unitJavaMC");
    try {
      jj_consume_token(BEGIN);
      jj_consume_token(ssc5906JavaMC);
      icmcJavaModelCheckerUnit();
      jj_consume_token(END);
      jj_consume_token(ssc5906JavaMC);
    } finally {
      trace_return("unitJavaMC");
    }
  }

  static final public void icmcJavaModelCheckerUnit() throws ParseException {
    trace_call("icmcJavaModelCheckerUnit");
    try {
      modelDec();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VERIFYING:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        propertiesVerifying();
      }
    } finally {
      trace_return("icmcJavaModelCheckerUnit");
    }
  }

  static final public void modelDec() throws ParseException {
    trace_call("modelDec");
    try {
      satesDec();
      propertiesDec();
      behavioerDec();
    } finally {
      trace_return("modelDec");
    }
  }

  static final public void propertiesVerifying() throws ParseException {
    trace_call("propertiesVerifying");
    try {
      jj_consume_token(VERIFYING);
    } finally {
      trace_return("propertiesVerifying");
    }
  }

  static final public void satesDec() throws ParseException {
    trace_call("satesDec");
    try {
      jj_consume_token(STATES);
      jj_consume_token(Lparentheses);
      jj_consume_token(IDENTIFIER);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
      }
      jj_consume_token(Rparentheses);
    } finally {
      trace_return("satesDec");
    }
  }

  static final public void propertiesDec() throws ParseException {
    trace_call("propertiesDec");
    try {
      jj_consume_token(PROPERTIES);
      jj_consume_token(Lparentheses);
      jj_consume_token(IDENTIFIER);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
      }
      jj_consume_token(Rparentheses);
    } finally {
      trace_return("propertiesDec");
    }
  }

  static final public void behavioerDec() throws ParseException {
    trace_call("behavioerDec");
    try {
  Token t = new Token();
      t = jj_consume_token(DEFINE);
      jj_consume_token(LBRACKET);
      defineBody();
      jj_consume_token(RBRACKET);
    } finally {
      trace_return("behavioerDec");
    }
  }

  static final public void defineBody() throws ParseException {
    trace_call("defineBody");
    try {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(RECEIVE);
      jj_consume_token(Lparentheses);
      nextStates();
      jj_consume_token(COLON);
      validProperties();
      jj_consume_token(Rparentheses);
      jj_consume_token(SEMICOLON);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        jj_consume_token(IDENTIFIER);
        jj_consume_token(RECEIVE);
        jj_consume_token(Lparentheses);
        nextStates();
        jj_consume_token(COLON);
        validProperties();
        jj_consume_token(Rparentheses);
        jj_consume_token(SEMICOLON);
      }
    } finally {
      trace_return("defineBody");
    }
  }

  static final public void nextStates() throws ParseException {
    trace_call("nextStates");
    try {
      jj_consume_token(IDENTIFIER);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
      }
    } finally {
      trace_return("nextStates");
    }
  }

  static final public void validProperties() throws ParseException {
    trace_call("validProperties");
    try {
      jj_consume_token(IDENTIFIER);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
      }
    } finally {
      trace_return("validProperties");
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ssc5906JMCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000,0x80000,0x80000,0x10000000,0x80000,0x80000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public ssc5906JMC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ssc5906JMC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ssc5906JMCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ssc5906JMC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ssc5906JMCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ssc5906JMC(ssc5906JMCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ssc5906JMCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[33];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
