/* Generated By:JavaCC: Do not edit this line. ssc5906JMCConstants.java */
package br.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ssc5906JMCConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int E = 12;
  /** RegularExpression Id. */
  int A = 13;
  /** RegularExpression Id. */
  int U = 14;
  /** RegularExpression Id. */
  int AX = 15;
  /** RegularExpression Id. */
  int EX = 16;
  /** RegularExpression Id. */
  int AF = 17;
  /** RegularExpression Id. */
  int EF = 18;
  /** RegularExpression Id. */
  int AG = 19;
  /** RegularExpression Id. */
  int EG = 20;
  /** RegularExpression Id. */
  int JMC = 21;
  /** RegularExpression Id. */
  int STATES = 22;
  /** RegularExpression Id. */
  int PROPERTIES = 23;
  /** RegularExpression Id. */
  int DEFINE = 24;
  /** RegularExpression Id. */
  int TRUE = 25;
  /** RegularExpression Id. */
  int FALSE = 26;
  /** RegularExpression Id. */
  int COMMA = 27;
  /** RegularExpression Id. */
  int LBRACKET = 28;
  /** RegularExpression Id. */
  int RBRACKET = 29;
  /** RegularExpression Id. */
  int SEMICOLON = 30;
  /** RegularExpression Id. */
  int COLON = 31;
  /** RegularExpression Id. */
  int EQ = 32;
  /** RegularExpression Id. */
  int Lparentheses = 33;
  /** RegularExpression Id. */
  int Rparentheses = 34;
  /** RegularExpression Id. */
  int RECEIVE = 35;
  /** RegularExpression Id. */
  int NOT = 36;
  /** RegularExpression Id. */
  int AND = 37;
  /** RegularExpression Id. */
  int OR = 38;
  /** RegularExpression Id. */
  int IMPLICATION = 39;
  /** RegularExpression Id. */
  int BICONDICIONAL = 40;
  /** RegularExpression Id. */
  int IDENTIFIER = 41;
  /** RegularExpression Id. */
  int LETTER = 42;
  /** RegularExpression Id. */
  int DIGIT = 43;
  /** RegularExpression Id. */
  int INVALID_LEXICAL = 44;
  /** RegularExpression Id. */
  int INVALID_CONST = 45;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int multilinecomment = 1;
  /** Lexical state. */
  int singlelinecomment = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"/*\"",
    "\"//\"",
    "\"*/\"",
    "<token of kind 9>",
    "<token of kind 10>",
    "<token of kind 11>",
    "\"E\"",
    "\"A\"",
    "\"U\"",
    "\"AX\"",
    "\"EX\"",
    "\"AF\"",
    "\"EF\"",
    "\"AG\"",
    "\"EG\"",
    "\"JMC\"",
    "\"states\"",
    "\"properties\"",
    "\"def\"",
    "\"true\"",
    "\"false\"",
    "\",\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\":\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\":=\"",
    "\"~\"",
    "\"^\"",
    "\"v\"",
    "\"->\"",
    "\"<->\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<INVALID_LEXICAL>",
    "<INVALID_CONST>",
  };

}
