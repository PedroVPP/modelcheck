/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Principal.java
 *
 * Created on 17/10/2011, 21:28:48
 */

package br.gui;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Set;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import br.algorithms.Algorithms;
import br.gui.util.TableModelDefine;
import br.gui.util.TableModelExpressions;
import br.gui.util.TableModelProperties;
import br.gui.util.TableModelState;
import br.gui.util.TableModelStateAnswer;
import br.mef.Define;
import br.mef.Expression;
import br.mef.MEF;
import br.mef.Property;
import br.mef.State;
import br.parser.ParseException;
import br.parser.ssc5906JMC;
import br.util.DocumentOutputStream;



/**
 *
 * @author Vânia
 */
public class Principal extends javax.swing.JFrame {

    private State state = null;
    private ArrayList<State> states = null;
    private Property property = null;
    private ArrayList<Property> properties = null;
    private Define define = null;
    private ArrayList<Define> defines = null;
    private Expression expression = null;
    private ArrayList<Expression> expressions = null;
    private StateAnswer stateAnswer = null;
    private ArrayList<StateAnswer> statesAnswer = null;
    /** Creates new form Principal */
    public Principal() {
        initComponents();
        inicializa();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        pnlStates3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtDefine = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jtfDiretorio = new javax.swing.JTextField();
        jbtPesquisar = new javax.swing.JToggleButton();
        jbImport = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        pnlStates = new javax.swing.JPanel();
        txtState = new javax.swing.JTextField();
        btnDelStates = new javax.swing.JButton();
        btnAddStates = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtStates = new javax.swing.JTable();
        pnlStates1 = new javax.swing.JPanel();
        txtProperties = new javax.swing.JTextField();
        btnDelProperties = new javax.swing.JButton();
        btnAddProperties = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtProperties = new javax.swing.JTable();
        pnlStates2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtStates2 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btNewDefine = new javax.swing.JButton();
        btDelDefine = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        //btOK = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        pnlStates4 = new javax.swing.JPanel();
        txtExpressions = new javax.swing.JTextField();
        btnDelExpression = new javax.swing.JButton();
        btnAddExpression = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jtExpressions = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        btOK = new javax.swing.JButton();
        pnlStatesExp = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jtStatesExp = new javax.swing.JTable();
        pnlMEF = new javax.swing.JPanel();
        jlbImagem = new javax.swing.JLabel();
        pnlMEFCP = new javax.swing.JPanel();
        jlbImagemCP = new javax.swing.JLabel();
        
        
        //#################### Trecho incluído - Frota ########################                   
        jScrollPaneLog =  new javax.swing.JScrollPane(); 
        jTextAreaLogMEF = new JTextArea();
        
        DocumentOutputStream dos= new DocumentOutputStream(jTextAreaLogMEF.getDocument());        
        System.setOut(new PrintStream(dos));
                        
        jTextAreaLogMEF.setColumns(30);
        jTextAreaLogMEF.setEditable(false);
        jTextAreaLogMEF.setRows(2);       
        
        jScrollPaneLog.setViewportView(jTextAreaLogMEF);
        
        System.out.println("##########  --- Java Model Checker - ICMC ssc5906  ---  ##########");
      //#################### Trecho incluído - Frota - Final ########################
        
        
        
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 1));

        jTabbedPane1.setMinimumSize(new java.awt.Dimension(40, 800));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(700, 680));

        pnlStates3.setBorder(javax.swing.BorderFactory.createTitledBorder("Define"));
        pnlStates3.setName("pnlStates"); // NOI18N
        pnlStates3.setPreferredSize(new java.awt.Dimension(895, 140));
        pnlStates3.setRequestFocusEnabled(false);
        pnlStates3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pnlStates3FocusLost(evt);
            }
        });
        pnlStates3.setLayout(new java.awt.GridLayout());

        jtDefine.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jtDefine.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtDefineMouseClicked(evt);
            }
        });
        jtDefine.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtDefineFocusGained(evt);
            }
        });
        jtDefine.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtDefinePropertyChange(evt);
            }
        });
        jScrollPane4.setViewportView(jtDefine);

        pnlStates3.add(jScrollPane4);


        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel31.setText("Choose File");

        jtfDiretorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfDiretorioActionPerformed(evt);
            }
        });

        jbtPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/novo.png"))); // NOI18N
        jbtPesquisar.setSelected(true);
        jbtPesquisar.setToolTipText("Select File");
        jbtPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPesquisarActionPerformed(evt);
            }
        });

        jbImport.setText("OK");
        jbImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfDiretorio, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbImport)
                .addContainerGap(104, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel31)
                        .addComponent(jtfDiretorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jbtPesquisar)
                    .addComponent(jbImport))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        pnlStates.setBorder(javax.swing.BorderFactory.createTitledBorder("States"));
        pnlStates.setName("pnlStates"); // NOI18N
        pnlStates.setPreferredSize(new java.awt.Dimension(895, 140));
        pnlStates.setRequestFocusEnabled(false);
        pnlStates.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pnlStatesFocusLost(evt);
            }
        });

        btnDelStates.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete.png"))); // NOI18N
        btnDelStates.setFocusable(false);
        btnDelStates.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelStates.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDelStates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelStatesActionPerformed(evt);
            }
        });

        btnAddStates.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add2.png"))); // NOI18N
        btnAddStates.setFocusable(false);
        btnAddStates.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddStates.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddStates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddStatesActionPerformed(evt);
            }
        });

        jtStates.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jtStates.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtStatesMouseClicked(evt);
            }
        });
        jtStates.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtStatesFocusGained(evt);
            }
        });
        jtStates.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtStatesPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jtStates);

        javax.swing.GroupLayout pnlStatesLayout = new javax.swing.GroupLayout(pnlStates);
        pnlStates.setLayout(pnlStatesLayout);
        pnlStatesLayout.setHorizontalGroup(
            pnlStatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStatesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlStatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlStatesLayout.createSequentialGroup()
                        .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddStates, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelStates, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlStatesLayout.setVerticalGroup(
            pnlStatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStatesLayout.createSequentialGroup()
                .addGroup(pnlStatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddStates, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelStates)
                    .addComponent(txtState))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
        );

        pnlStates1.setBorder(javax.swing.BorderFactory.createTitledBorder("Properties"));
        pnlStates1.setName("pnlStates"); // NOI18N
        pnlStates1.setPreferredSize(new java.awt.Dimension(895, 140));
        pnlStates1.setRequestFocusEnabled(false);
        pnlStates1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pnlStates1FocusLost(evt);
            }
        });

        btnDelProperties.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete.png"))); // NOI18N
        btnDelProperties.setFocusable(false);
        btnDelProperties.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelProperties.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDelProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelPropertiesActionPerformed(evt);
            }
        });

        btnAddProperties.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add2.png"))); // NOI18N
        btnAddProperties.setFocusable(false);
        btnAddProperties.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddProperties.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPropertiesActionPerformed(evt);
            }
        });

        jtProperties.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jtProperties.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtPropertiesMouseClicked(evt);
            }
        });
        jtProperties.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtPropertiesFocusGained(evt);
            }
        });
        jtProperties.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtPropertiesPropertyChange(evt);
            }
        });
        jScrollPane2.setViewportView(jtProperties);

        javax.swing.GroupLayout pnlStates1Layout = new javax.swing.GroupLayout(pnlStates1);
        pnlStates1.setLayout(pnlStates1Layout);
        pnlStates1Layout.setHorizontalGroup(
            pnlStates1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStates1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlStates1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                    .addGroup(pnlStates1Layout.createSequentialGroup()
                        .addComponent(txtProperties, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddProperties, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelProperties, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlStates1Layout.setVerticalGroup(
            pnlStates1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStates1Layout.createSequentialGroup()
                .addGroup(pnlStates1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtProperties)
                    .addComponent(btnDelProperties, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAddProperties, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
        );

        pnlStates2.setBorder(javax.swing.BorderFactory.createTitledBorder("States"));
        pnlStates2.setName("pnlStates"); // NOI18N
        pnlStates2.setPreferredSize(new java.awt.Dimension(895, 140));
        pnlStates2.setRequestFocusEnabled(false);
        pnlStates2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pnlStates2FocusLost(evt);
            }
        });

        jtStates2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jtStates2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtStates2MouseClicked(evt);
            }
        });
        jtStates2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtStates2FocusGained(evt);
            }
        });
        jtStates2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtStates2PropertyChange(evt);
            }
        });
        jScrollPane3.setViewportView(jtStates2);

        javax.swing.GroupLayout pnlStates2Layout = new javax.swing.GroupLayout(pnlStates2);
        pnlStates2.setLayout(pnlStates2Layout);
        pnlStates2Layout.setHorizontalGroup(
            pnlStates2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStates2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlStates2Layout.setVerticalGroup(
            pnlStates2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStates2Layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btNewDefine.setText("New");
        btNewDefine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNewDefineActionPerformed(evt);
            }
        });

        btDelDefine.setText("Delete");
        btDelDefine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDelDefineActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(btDelDefine, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btNewDefine, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(btNewDefine, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(btDelDefine, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlStates, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlStates1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlStates2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlStates, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                    .addComponent(pnlStates1, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                    .addComponent(pnlStates2, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        btOK.setText("OK");
        btOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOKActionPerformed(evt);
            }
        });
/*
        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(543, Short.MAX_VALUE)
                .addComponent(btOK, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btOK, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(pnlStates3, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlStates3, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(822, 822, 822))
        );
*/
      /*  
        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneLog, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btOK, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPaneLog, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(btOK, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(pnlStates3, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlStates3, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(822, 822, 822))
        );
        
        */
        
        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneLog, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPaneLog, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(pnlStates3, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlStates3, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(920, 920, 920))
        );
        
        
        jTabbedPane1.addTab("Start", jPanel1);

        jPanel7.setLayout(new java.awt.GridLayout());

        pnlStates4.setBorder(javax.swing.BorderFactory.createTitledBorder("Expressions"));
        pnlStates4.setName("pnlStates"); // NOI18N
        pnlStates4.setPreferredSize(new java.awt.Dimension(895, 140));
        pnlStates4.setRequestFocusEnabled(false);
        pnlStates4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pnlStates4FocusLost(evt);
            }
        });

        btnDelExpression.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete.png"))); // NOI18N
        btnDelExpression.setFocusable(false);
        btnDelExpression.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelExpression.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDelExpression.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelExpressionActionPerformed(evt);
            }
        });

        btnAddExpression.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add2.png"))); // NOI18N
        btnAddExpression.setFocusable(false);
        btnAddExpression.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddExpression.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddExpression.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddExpressionActionPerformed(evt);
            }
        });

        jtExpressions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jtExpressions.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
            	initStatesAnswer();
            	initMEFCP(false);
    			pnlMEFCP.setVisible(false);   				
            }
        });        
        jtExpressions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtExpressionsMouseClicked(evt);
            }
        });
        jtExpressions.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtExpressionsFocusGained(evt);
            }
        });
        jtExpressions.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtExpressionsPropertyChange(evt);
            }
        });
        jScrollPane5.setViewportView(jtExpressions);

        btOK.setText("OK");
        btOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	btOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(580, Short.MAX_VALUE)
                .addComponent(btOK, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btOK, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnlStatesExp.setBorder(javax.swing.BorderFactory.createTitledBorder("States"));
        pnlStatesExp.setName("pnlStates"); // NOI18N
        pnlStatesExp.setPreferredSize(new java.awt.Dimension(895, 140));
        pnlStatesExp.setRequestFocusEnabled(false);


        jtStatesExp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));

        jtStatesExp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtStatesExpMouseClicked(evt);
            }
        });        

        jScrollPane6.setViewportView(jtStatesExp);

        javax.swing.GroupLayout pnlStatesExpLayout = new javax.swing.GroupLayout(pnlStatesExp);
        pnlStatesExp.setLayout(pnlStatesExpLayout);
        pnlStatesExpLayout.setHorizontalGroup(
            pnlStatesExpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStatesExpLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, 0, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlStatesExpLayout.setVerticalGroup(
            pnlStatesExpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStatesExpLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlStates4Layout = new javax.swing.GroupLayout(pnlStates4);
        pnlStates4.setLayout(pnlStates4Layout);
        pnlStates4Layout.setHorizontalGroup(
            pnlStates4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStates4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlStates4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlStates4Layout.createSequentialGroup()
                        .addGroup(pnlStates4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStates4Layout.createSequentialGroup()
                                .addComponent(txtExpressions, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddExpression, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelExpression, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pnlStatesExp, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        pnlStates4Layout.setVerticalGroup(
            pnlStates4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStates4Layout.createSequentialGroup()
                .addGroup(pnlStates4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtExpressions, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(btnAddExpression, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelExpression, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlStatesExp, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(294, 294, 294))
        );

        jPanel7.add(pnlStates4);

        jTabbedPane1.addTab("Expressions", jPanel7);

        pnlMEF.setBackground(new java.awt.Color(255, 255, 255));
        pnlMEF.setLayout(new java.awt.GridLayout());
        pnlMEF.add(jlbImagem);

        jTabbedPane1.addTab("MEF", pnlMEF);

        pnlMEFCP.setBackground(new java.awt.Color(255, 255, 255));
        pnlMEFCP.setLayout(new java.awt.GridLayout());
        pnlMEFCP.add(jlbImagemCP);
        pnlMEFCP.setVisible(false);

        //jTabbedPane1.addTab("Contra Prova", pnlMEFCP);        
        getContentPane().add(jTabbedPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pnlStatesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pnlStatesFocusLost
}//GEN-LAST:event_pnlStatesFocusLost

    private void btnDelStatesActionPerformed(java.awt.event.ActionEvent evt) {
        int[] indices = jtStates.getSelectedRows();
        for (int i : indices){
            this.states.remove(((TableModelState)jtStates.getModel()).getValores(i));
        }
        ((TableModelState)jtStates.getModel()).fireTableDataChanged();
        ((TableModelState)jtStates2.getModel()).fireTableDataChanged();    
    }

    private void btnAddStatesActionPerformed(java.awt.event.ActionEvent evt) {
        if (!txtState.getText().trim().equals("")){
        	if (this.state == null) {        	
                State newState = new State(txtState.getText());
                if (!states.contains(newState)){
                	this.states.add(newState);
                    StateAnswer staw = new StateAnswer(txtState.getText());
                    this.statesAnswer.add(staw); 
                    txtState.setText("");
                }
            }
            else{
                state.setName(txtState.getText());
                this.stateAnswer.setName(txtState.getText());
                txtState.setText("");
            }
            ((TableModelState)jtStates.getModel()).fireTableDataChanged();
            ((TableModelState)jtStates2.getModel()).fireTableDataChanged();
            ((TableModelStateAnswer)jtStatesExp.getModel()).fireTableDataChanged();        
                    	
        }   	
    	
    }

    private void jtStatesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtStatesMouseClicked
    }//GEN-LAST:event_jtStatesMouseClicked

    private void jtStatesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtStatesFocusGained

}//GEN-LAST:event_jtStatesFocusGained

    private void jtStatesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtStatesPropertyChange
        // TODO add your handling code here:
}//GEN-LAST:event_jtStatesPropertyChange

    private void jtfDiretorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfDiretorioActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jtfDiretorioActionPerformed

    private void jbtPesquisarActionPerformed(java.awt.event.ActionEvent evt) {
    try{
        JFileChooser jfc = new JFileChooser();
        int returnVal = jfc.showOpenDialog(this);
        if (returnVal == jfc.APPROVE_OPTION) {
        	File file = jfc.getSelectedFile();
            jtfDiretorio.setText(file.getAbsolutePath());
        }        
    }
    catch(java.lang.Exception e){
        JOptionPane.showMessageDialog(null,"Erro ao selecionar arquivo.","Alerta",JOptionPane.WARNING_MESSAGE);
    }
    }

    private void btnDelPropertiesActionPerformed(java.awt.event.ActionEvent evt) {
        int[] indices = jtProperties.getSelectedRows();
        for (int i : indices){
            this.properties.remove(((TableModelProperties)jtProperties.getModel()).getValores(i));
        }
        ((TableModelProperties)jtProperties.getModel()).fireTableDataChanged();
    }

    private void btnAddPropertiesActionPerformed(java.awt.event.ActionEvent evt) {
    	if (!txtProperties.getText().trim().equals("")){
            if (this.property == null){
                Property newProperty = new Property(txtProperties.getText());
                if (!properties.contains(newProperty)){
                	this.properties.add(newProperty);
                	txtProperties.setText("");
                }
                 
            }
            else{
                property.setName(txtProperties.getText());
                txtProperties.setText("");
            }
            ((TableModelProperties)jtProperties.getModel()).fireTableDataChanged();
    		
    	}        
    }
    

    private void jtPropertiesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtPropertiesMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtPropertiesMouseClicked

    private void jtPropertiesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtPropertiesFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jtPropertiesFocusGained

    private void jtPropertiesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtPropertiesPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jtPropertiesPropertyChange

    private void pnlStates1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pnlStates1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_pnlStates1FocusLost

    private void jtStates2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtStates2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtStates2MouseClicked

    private void jtStates2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtStates2FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jtStates2FocusGained

    private void jtStates2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtStates2PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jtStates2PropertyChange

    private void pnlStates2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pnlStates2FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_pnlStates2FocusLost

    private void jtDefineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtDefineMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtDefineMouseClicked

    private void jtDefineFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtDefineFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jtDefineFocusGained

    private void jtDefinePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtDefinePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jtDefinePropertyChange

    private void pnlStates3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pnlStates3FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_pnlStates3FocusLost

    private void jbImportActionPerformed(java.awt.event.ActionEvent evt) {
        String[] nomeArquivo = new String[1];
        nomeArquivo[0] = jtfDiretorio.getText();
        try {
        	MEF.getInstance().cleanMEF();
			ssc5906JMC.main(nomeArquivo);
	 	    this.setStates(MEF.getInstance().getStates());
	 	    this.setProperties(MEF.getInstance().getProperties());
	 	    this.setDefines(new ArrayList(0));
	 	    this.setExpressions(MEF.getInstance().getExpressions());
	 	    this.setStatesAnswer(new ArrayList(0));
	    
           	for(int i=0; i<states.size(); i++){
            	State st = (State) states.get(i);

	    		Define def = new Define();
	    		def.setState(st);
				ArrayList<Property> props = st.getValidProperties();

				StateAnswer staw = new StateAnswer(st.getName());
				statesAnswer.add(staw);
				for(int j=0; j<props.size(); j++){					
					Property prop = (Property) props.get(j);
					if (!prop.getName().equals("TRUE"))
						def.addProperty(prop);
				}
				
				ArrayList<State> childrens = st.getChildren();
				for(int j=0; j<childrens.size(); j++){
					State child = (State) childrens.get(j);
					def.addState(child);
				}
				this.defines.add(def);
	    	}
	    	((TableModelState)jtStates.getModel()).fireTableDataChanged();
	    	((TableModelProperties)jtProperties.getModel()).fireTableDataChanged();
	    	((TableModelExpressions)jtExpressions.getModel()).fireTableDataChanged();
	    	((TableModelDefine)jtDefine.getModel()).fireTableDataChanged();
	    	((TableModelStateAnswer)jtStatesExp.getModel()).fireTableDataChanged();
		} catch (ParseException e) {
			JOptionPane.showMessageDialog(null,"Erro","Alerta",JOptionPane.WARNING_MESSAGE);
		}
		setImgMEF();

    }

    private void btnDelExpressionActionPerformed(java.awt.event.ActionEvent evt) {
        int[] indices = jtExpressions.getSelectedRows();
        for (int i : indices){
            this.expressions.remove(((TableModelExpressions)jtExpressions.getModel()).getValores(i));
        }
        ((TableModelExpressions)jtExpressions.getModel()).fireTableDataChanged();
    }

    private void btnAddExpressionActionPerformed(java.awt.event.ActionEvent evt) {
        if (this.expression == null){
            Expression newExpression = new Expression(txtExpressions.getText());
            this.expressions.add(newExpression); 
        }
        else{
            expression.setName(txtExpressions.getText());
        }
        ((TableModelExpressions)jtExpressions.getModel()).fireTableDataChanged();
        txtExpressions.setText("");
    }

    private void jtExpressionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtExpressionsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtExpressionsMouseClicked

    private void jtExpressionsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtExpressionsFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jtExpressionsFocusGained

    private void jtExpressionsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtExpressionsPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jtExpressionsPropertyChange

    private void pnlStates4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pnlStates4FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_pnlStates4FocusLost

    private void jtStatesExpMouseClicked(java.awt.event.MouseEvent evt) {                                         
    	if (evt.getClickCount() == 2){
    		if (jtExpressions.getSelectedRowCount() == 1){
    		   if (jtStatesExp.getSelectedRowCount() == 1){ 
           		//Expression exp = ((TableModelExpressions)jtExpressions.getModel()).getValores(jtExpressions.getSelectedRow());
        		StateAnswer staw = ((TableModelStateAnswer)jtStatesExp.getModel()).getValores(jtStatesExp.getSelectedRow());
        		State st = MEF.getInstance().getState(staw.getName());
        		Expression exp = MEF.getInstance().getExpressions().get(jtExpressions.getSelectedRow());
        		boolean isValid = Algorithms.executeOperation(st, exp);
        		if (isValid){
        			staw.setValid("True");
        			initMEFCP(false);
        		}
        		else{
        			staw.setValid("False");
        			initMEFCP(true);
        		}
        		((TableModelStateAnswer)jtStatesExp.getModel()).fireTableDataChanged();
    			   
    		   }
    		   else{
    			   JOptionPane.showMessageDialog(null,"Select one state.","Alerta",JOptionPane.WARNING_MESSAGE);   
    		   }
    			
    		}
    		else{
    			JOptionPane.showMessageDialog(null,"Select one expression.","Alerta",JOptionPane.WARNING_MESSAGE);
    		}
    	}
    } 

    private void initStatesAnswer(){
    	for(int i=0; i<statesAnswer.size(); i++){
        	StateAnswer st = (StateAnswer) statesAnswer.get(i);
        	st.setValid("");
    	}
    	((TableModelStateAnswer)jtStatesExp.getModel()).fireTableDataChanged();
    	
    }
    private void initMEFCP(boolean habilita){
    	if (habilita){
			pnlMEFCP.setVisible(true);
			jTabbedPane1.addTab("Contra Prova", pnlMEFCP);    		
    	}
    	else{
			pnlMEFCP.setVisible(false);
			if (jTabbedPane1.countComponents() == 4){
				jTabbedPane1.removeTabAt(3);
			}	
    	}
    }
    private void btNewDefineActionPerformed(java.awt.event.ActionEvent evt) {
        if (this.define == null){
            Define newDefine = new Define();
            int indice = jtStates.getSelectedRow();            	
            newDefine.setState(((TableModelState)jtStates.getModel()).getValores(indice));
            
            int[] indProperties = jtProperties.getSelectedRows();
            for (int i : indProperties){
            	newDefine.addProperty(((TableModelProperties)jtProperties.getModel()).getValores(i));
            }            
            
            int[] indStates = jtStates2.getSelectedRows();
            for (int i : indStates){
            	newDefine.addState(((TableModelState)jtStates2.getModel()).getValores(i));
            }            
            
            this.defines.add(newDefine); 
        }
        ((TableModelDefine)jtDefine.getModel()).fireTableDataChanged();
}

    private void btDelDefineActionPerformed(java.awt.event.ActionEvent evt) {
        int[] indices = jtDefine.getSelectedRows();
        for (int i : indices){
            this.defines.remove(((TableModelDefine)jtDefine.getModel()).getValores(i));
        }
        ((TableModelDefine)jtDefine.getModel()).fireTableDataChanged();
    }

    private void btOKActionPerformed(java.awt.event.ActionEvent evt) {    	
        String defMEF = "jmc \n states (";
		for (int i = 0; i < states.size(); ++i) {
    		State est = (State) states.get(i);
    		defMEF = defMEF + est.getName()+ " ";   		
    	}
		defMEF = defMEF + ")\n properties (";
		for (int i = 0; i < properties.size(); ++i) {
    		Property prop = (Property) properties.get(i);
    		if (!prop.getName().equals("TRUE"))
    			defMEF = defMEF + prop.getName()+ " ";   		
    	}		
		defMEF = defMEF + ")\n def[";
		for (int i = 0; i < defines.size(); ++i) {
    		Define def = (Define) defines.get(i);
    		defMEF = defMEF + def.getState().getName()+ " (";
    		
    		ArrayList<State> sts = def.getStates();
    		for (int j = 0; j < sts.size(); ++j) {
        		State st = (State) sts.get(j);
        		defMEF = defMEF + st.getName()+ " ";   		
        	}		    		
    		defMEF = defMEF + " : ";
    		ArrayList<Property> props = def.getProperties();
    		for (int j = 0; j < props.size(); ++j) {
        		Property prop = (Property) props.get(j);
        		defMEF = defMEF + prop.getName()+ " ";        		
        	}		    		
    		defMEF = defMEF + ") ";
    	}		
		defMEF = defMEF + "] \n";
		for (int i = 0; i < expressions.size(); ++i) {
			if (i != 0 ){
				defMEF = defMEF + " , ";
			}
    		Expression exp = (Expression) expressions.get(i);
    		defMEF = defMEF + exp.getName()+ "\n";   		
    	}		
		defMEF = defMEF + " jmc";
        FileWriter arquivo;  
          
        String[] nomeArquivo = new String[1];
        nomeArquivo[0] = "demMEF.txt";
        try {       	
            arquivo = new FileWriter(new File(nomeArquivo[0]));  
            arquivo.write(defMEF);  
            arquivo.close();  
        } catch (IOException e) {  
            e.printStackTrace();  
        } catch (Exception e) {  
            e.printStackTrace();  
        }

        try {
        	MEF.getInstance().cleanMEF();
			ssc5906JMC.main(nomeArquivo);
		} catch (ParseException e) {
			JOptionPane.showMessageDialog(null,"Erro","Alerta",JOptionPane.WARNING_MESSAGE);
		}
		setImgMEF();
    }

    private void setImgMEF(){
    	MEF.getInstance().createMEF(); 
		ImageIcon img = new ImageIcon(MEF.getInstance().getImagem());
		JLabel label = new JLabel(img);
		label.setBounds(0, 0, img.getIconWidth() + 10, img.getIconHeight() + 10);
		//this.setJlbImagem(label);
		pnlMEF.removeAll();
		pnlMEF.add(new JScrollPane(label));		
		this.jlbImagem.setHorizontalAlignment(SwingConstants.CENTER);
		//Expression e = (Expression) MEF.getInstance().getExpressions().get(MEF.getInstance().getExpressions().size() -1);
		//considerar somente o último elemento do  vetor
		//ver comentário do icmcJMC.jj
		//analyzeExpressions(e);
		//depois de analisar as expressões, para saber se ela é válida, bastaria verificar se ela 
		//possui o label da expressão (verificar comentários das classes State e Algorithms
		//percorrer os estados e setar o statesAnswer
		//ficaria mais ou menos assim:
		// for states...{
		// if state(i).getLabels().contains(e.getLabel))
		//pegar o stateAnswer correspondente ao state
		//e setar valid = true, senão setar valid = false
		this.pack();    	
    }
    
    
    
    public void setStates(ArrayList<State> states){
        try {
     	   this.states = states;
            TableModelState modelo = new TableModelState(states);
            jtStates.setModel(modelo);
            jtStates2.setModel(modelo);

        }
         catch(java.lang.Exception e){
             JOptionPane.showMessageDialog(null,"Error when initialize States.","Alert",JOptionPane.WARNING_MESSAGE);
         }
    }

    public void setStatesAnswer(ArrayList<StateAnswer> statesAnswer){
        try {
     	   this.statesAnswer = statesAnswer;
            TableModelStateAnswer modelo = new TableModelStateAnswer(statesAnswer);
            jtStatesExp.setModel(modelo);
        }
         catch(java.lang.Exception e){
             JOptionPane.showMessageDialog(null,"Error when initialize States.","Alert",JOptionPane.WARNING_MESSAGE);
         }
    }    
    public void setProperties(ArrayList<Property> properties){
        try {
     	   this.properties = properties;
            TableModelProperties modelo = new TableModelProperties(properties);
            jtProperties.setModel(modelo);

        }
         catch(java.lang.Exception e){
             JOptionPane.showMessageDialog(null,"Error when initialize Properties.","Alert",JOptionPane.WARNING_MESSAGE);
         }
    }

    public void setDefines(ArrayList<Define> defines){
        try {
     	   this.defines = defines;
            TableModelDefine modelo = new TableModelDefine(defines);
            jtDefine.setModel(modelo); 

        }
         catch(java.lang.Exception e){
             JOptionPane.showMessageDialog(null,"Error when initialize Defines.","Alert",JOptionPane.WARNING_MESSAGE);
         }
    }

    public void setExpressions(ArrayList<Expression> expressions){
        try {
     	   this.expressions = expressions;
            TableModelExpressions modelo = new TableModelExpressions(expressions);
            jtExpressions.setModel(modelo);

        }
         catch(java.lang.Exception e){
             JOptionPane.showMessageDialog(null,"Error when initialize Expressions.","Alert",JOptionPane.WARNING_MESSAGE);
         }
    }
    
    public boolean analyzeExpressions(Expression e){
    	return false;
    }
    
    //pra mim esse método serviria pra percorrer as expressões e 
    // rotular os estados pra ver se a expressão seria válida naquele 
    //estado
    /*public void analyzeExpressions(Expression e){
		for (int i = 0; i < states.size(); ++i) {
     		State est = (State) states.get(i);
		  	  if (!e.getType().equals("CS"))
		  		//do jeito q o ArrayList foi montado, iria repetir...
		  		//por ex, EG r, iria considerar o r, depois EG e depois EG r
		  		//e o certo seria apenas o r e o EG r, por isso esse if...  
		  	  {
		  		  
		  //System.out.println(e.getName());
		  //nesse trecho deveria verificar qual o tipo de instrução
		  // E, OU, => , <=>, AF, EF, U, etc.
		  //e dependendo desse tipo chamar o algoritmo correto
		  // no meu entendimento, esse algoritmo iria rotular o estado
		 // pra saber se a expressão é válida (ver comentário na classe State)
  		  //Como exemplo, fiz somente para o E e qnd é um atributo
		    if (!e.getType().equals("^")){
		    	Algorithms.Alg_E(est, e.getExp1(), e.getExp1());
		    }
		    else if (!e.getType().equals("Id")){
		    	Algorithms.Alg_Id(est, e.getExp1()); 
		    }		    
		  	  }	  
			  if (e.getExp1() != null)
			  {
				  analyzeExpressions(e.getExp1());
			  }
			    
			  if (e.getExp2() != null)
			  {
				  analyzeExpressions(e.getExp2());
			  }
    	}
    	
    }*/
    
    public void inicializa(){
 	   this.setStates(new ArrayList(0));
 	   this.setProperties(new ArrayList(0));
 	   this.setDefines(new ArrayList(0));
  	   this.setExpressions(new ArrayList(0));
  	   this.setStatesAnswer(new ArrayList(0));
 	   
    }
    
    public void setJlbImagem(javax.swing.JLabel label){
       	this.jlbImagem  = label;
       }         
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDelDefine;
    private javax.swing.JButton btNewDefine;
    private javax.swing.JButton btOK;
    //private javax.swing.JButton btOK2;
    private static javax.swing.JButton btnAddProperties;
    private static javax.swing.JButton btnAddStates;
    private static javax.swing.JButton btnAddExpression;
    private static javax.swing.JButton btnDelProperties;
    private static javax.swing.JButton btnDelStates;
    private static javax.swing.JButton btnDelExpression;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel pnlMEF;
    private javax.swing.JPanel pnlMEFCP;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jspMEF;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jbImport;
    private javax.swing.JToggleButton jbtPesquisar;
    private javax.swing.JLabel jlbImagem;
    private javax.swing.JLabel jlbImagemCP;
    private javax.swing.JTable jtProperties;
    private javax.swing.JTable jtStates;
    private javax.swing.JTable jtDefine;
    private javax.swing.JTable jtStates2;
    private javax.swing.JTable jtExpressions;
    private javax.swing.JTextField jtfDiretorio;
	private javax.swing.JTable jtStatesExp;
    private javax.swing.JPanel pnlStates;
    private javax.swing.JPanel pnlStates1;
    private javax.swing.JPanel pnlStates2;
    private javax.swing.JPanel pnlStates3;
    private javax.swing.JPanel pnlStates4;
    private javax.swing.JPanel pnlStatesExp;
    private javax.swing.JTextField txtExpressions;
    private javax.swing.JTextField txtProperties;
    private javax.swing.JTextField txtState;
    // End of variables declaration//GEN-END:variables

    
    //trecho incluído Frota
    private javax.swing.JScrollPane jScrollPaneLog;
    private javax.swing.JTextArea jTextAreaLogMEF;



}
